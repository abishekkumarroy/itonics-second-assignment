// Generated by Selenium IDE
import Utilities.ExtentTestManager;
import com.relevantcodes.extentreports.LogStatus;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;

import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.IOException;
import java.util.*;

public class bookCartTest extends BaseTest{
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
      // Step 1: driver setup
    ChromeOptions options = new ChromeOptions();
    driver = new ChromeDriver(options);
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }


  @Test
  public void bookCartTest_assertusername() {
    try {

        // Step 2: Log in using the API (simulate login through Swagger API)
        String loginUrl = "https://bookcart.azurewebsites.net/api/Login";  // Correct URL
        String username = "abishekroy";  // Your registered username
        String password = "Ankitanku123#";  // Your registered password

        try {
            // Step 2.1: Create HTTP client and POST request to login
            HttpClient client = HttpClients.createDefault();
            HttpPost postRequest = new HttpPost(loginUrl);

            // Step 2.2: Prepare JSON payload for login
            String json = String.format("{\"username\":\"%s\", \"password\":\"%s\"}", username, password);
            StringEntity entity = new StringEntity(json);
            postRequest.setEntity(entity);
            postRequest.setHeader("Content-Type", "application/json");

            // Step 2.3: Execute the request and get the response
            HttpResponse response = client.execute(postRequest);
            int statusCode = response.getStatusLine().getStatusCode();
            String responseBody = EntityUtils.toString(response.getEntity());

            // Log response status and body
            System.out.println("Response Code: " + statusCode);
            System.out.println("Response Body: " + responseBody);

            if (statusCode == 200) {
                // Step 2.4: Extract token from response (assuming it's a JSON response)
                String authToken = extractAuthToken(responseBody);  // Implement this method to extract token
                System.out.println("Extracted Auth Token: " + authToken);

                // Step 3: Open the website in Selenium and set authentication cookies
                driver.get("https://bookcart.azurewebsites.net/");  // Open the URL

                // Add the authentication cookie to the WebDriver session
                Cookie cookie = new Cookie("auth_token", authToken, "bookcart.azurewebsites.net", "/", null, false, false);
                driver.manage().addCookie(cookie);


                // Debug: Print all cookies to verify they are set correctly
                Set<Cookie> cookies = driver.manage().getCookies();
                for (Cookie c : cookies) {
                    System.out.println("Cookie: " + c.getName() + "=" + c.getValue());
                }

                // Step 4: Refresh the page to apply the cookie
                driver.navigate().refresh();

                // Wait for the page to load and the session to be authenticated
                Thread.sleep(5000);  // Wait for the page to load (you can adjust the sleep time as needed)

                // Step 5: Assert username in the toolbar after login
                try {
                    // Use the correct selector to find the username element
                    WebElement usernameElement = driver.findElement(By.id("username-toolbar"));  // Adjust selector
                    String usernameInToolbar = usernameElement.getText();
                    System.out.println("Username in toolbar: " + usernameInToolbar);

                    // Assert that the username in the toolbar is the same as the expected username
                    if (usernameInToolbar.equals(username)) {
                        System.out.println("Login successful. Username matched!");
                        ExtentTestManager.getTest().log(LogStatus.PASS, "Login successful. Username matched! ", "");

                    } else {
                        System.out.println("Username mismatch. Login failed.");
                        ExtentTestManager.getTest().log(LogStatus.WARNING, "Username mismatch. Login failed. ", "");

                    }
                } catch (Exception e) {
                    System.out.println("Unable to find username element.");
                    ExtentTestManager.getTest().log(LogStatus.FAIL, "Unable to find username element. ", "");

                }

                // Step 6: Close the browser
                driver.quit();
            } else {
                System.out.println("Login failed. Response code: " + statusCode);
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }catch (Exception e) {
    }
  }



    // Helper method to extract the token from the response (adjust based on actual response format)
    private static String extractAuthToken(String responseBody) {

        int tokenStart = responseBody.indexOf("token\":\"") + 8;
        int tokenEnd = responseBody.indexOf("\"", tokenStart);
        return responseBody.substring(tokenStart, tokenEnd);
    }
}






